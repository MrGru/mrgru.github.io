[{"categories":["Godot engine"],"contents":"1. Tải về và sử dụng godot Địa chỉ tải về và cài đặt godot: https://godotengine.org/download/ Godot có thể chạy trên các hệ điều hành: Linux (bản 32 bit, 64 bit), MacOS(64 bit) và Window (32bit, 64 bit). Từ phiên bản 3.2, Godot có hỗ trợ ngôn ngữ C#, sử dụng bản cài Mono version. Ngoài ra Godot còn sử dụng cho Server với bản:\n Headless: bản Linux 64-bit chạy trên môi trường không đồ họa người dùng, sử dụng dòng lệnh (command line) để chạy test hoặc export project của bạn. Server: Bản build Linux 64 bit của template export chạy mà không có đồ họa hay âm thanh, hữu ích cho việc làm server host cho các game làm với Godot.  Hiện tại mình sử dụng bản Godot cho window, các hướng dẫn hoặc thực hiện của mình đều sử dụng mỗi trường windows bản 64 bit và sử dụng bản Standard (GDScript). Với Godot các bạn chỉ cần tải về giải nén và chạy trực tiếp mà không cần cài đặt. Như hình dưới mình tải về bản Godot 3.2. Các bạn có thể thấy kích thước file của Godot rất nhẹ khoảng 62.5MB sau khi giải nén: 2. Giao diện quản lý của Godot Sau khi tải về hãy mở Godot và cùng khám phá giao diện của Godot. Trang đầu tiên khi mở ra là phần Quản lý dự án và\u0026hellip; cái màn hình console (Thứ mình không ưa lắm của Godot). Đối với các bạn khi mở lần đầu hoặc ở những lần sau nhưng chưa có dự án nào trong Tab Projects. Sẽ có thêm dialog thông báo bạn có muốn mở Asset Library không. Click vào thì công việc của nó là chuyển qua Tab Templates. Mình sẽ trao đổi về tab này sau. Trước hết cùng xem qua giao diện của tab Project.\nVới tab này bạn có thể xem phiên bản hiện tại, thay đổi ngôn ngữ, xem các Project hiện tại bạn đang có, tìm kiếm lọc project. Các chức năng chính như Tạo mới Project, Xóa, Import thêm, Chạy, Sửa hoặc Đổi tên ở bên phải tương ứng. Các Button ẩn là các button tác động đến Project khi bạn lựa chọn.\nVới Tab Templates bạn có thể tải về các dự án mẫu mã nguồn mở và các demo từ Asset Library để giúp bạn bắt đầu nhanh hơn. Chỉ cần lựa chọn template hoặc demo bạn muốn và tải về, khi hoàn thành chọn install và chọn nơi bạn muốn đặt dự án. Phần Project Manager này của Godot khá giống với Unity Hub, và phần Templates tương tự với Asset Store của Unity. Tuy nhiên với Template của Godot thì hoàn toàn là miễn phí mọi addons, scripts, tools hay các tài nguyên được người dùng cung cấp trong Asset Library này đều là giấy phép mã nguồn mở (MIT, GPL hoặc Boost Software Licenese). Trong tương lai có thể sẽ có những nơi chứa những Asset có thu phí giúp người dùng có thể kiếm tiền và bán các tài nguyên nhưng sẽ là bên ngoài Asset Library này. ![image](../../images/post/post-2/select-folder-for-lib.jpg = 250px)\nHình ảnh về Project Manager tương tự nhau giữa các engine: Unity, Cocos Creator 3. Các nguồn tài liệu học Godot Trước khi bắt đầu với một dự án Godot cũng như tìm hiểu về editor, mình muốn tổng hợp một số nguồn để học và tìm hiểu về Godot. Godot còn khá mới so với các engine khác, tuy nhiên tài liệu và nguồn hỗ trợ vẫn khá nhiều để có thể giúp các bạn tìm hiểu và học hỏi\n  Trước hết phải kể đến trang chủ của godot: Đây là nguồn tài liệu chính thống, cập nhật nhất và tốt nhất. Có một số bản dịch của các ngôn ngữ khác ngoài tiếng Anh. Phần lớn các bài viết của mình đều dựa trên nguồn chính là trên này. Nếu các bạn khá Tiếng Anh, mình khuyên các bạn nên tự tìm hiểu từ nguồn này. https://docs.godotengine.org/en/stable/index.html\n  Các kênh hướng dẫn qua video: GDQuest: Kênh có rất nhiều video hướng dẫn về Godot Emilio: Liên quan nhiều đến VisualScripting Game from Scratch HeartBeast KidsCanCode Pigdev\n  Kênh trao đổi: Godot-Reddit Godot-Twitter Godot-Facebook Godot-Youtube Godot-Discord Godot-Github Godot-Forum Godot Việt Nam\n  Những người trực tiếp đóng góp cho godot Juan Linietsky - Cha đẻ của godot Rémi Verchelde - Quản lý dự án godot\n  Link tổng hợp: Awesome-Godot: Tổng hợp bởi Calinou, Nguồn tổng hợp trên Zeef\n  Ps: Trước khi kết thúc bài. Một số hình ảnh mang tính cà khịa khi so sánh độ \u0026ldquo;nặng\u0026rdquo; của các engine như Unity và Cocos Creator:   File Cài đặt: Với Cocos Creator khoảng hơn 600MB, Unity sử dụng Unity Hub khoảng 50MB   Cài đặt Unity với yêu cầu 5.4GB và Cocos Creator với 1.7GB @@:   Cài đặt các engine này đều có license yêu cầu đồng ý:\n","permalink":"https://mrgru.github.io/blog/start-with-godot/","tags":["Open source","Game","Engine","Game Engine","MIT"],"title":"2. Bắt đầu với Godot."},{"categories":["Godot engine"],"contents":"Lựa chọn game engine luôn là vấn đề khó khăn đối với mỗi người khi bắt đầu. Qua quá trình sử dụng các engine, mình đã nhận thấy Godot khá phù hợp với các dự án game của mình so với các engine khác như Unity, Unreal, Libgx, Cocos creator, Corona SDK, Game maker, Contruct2D\u0026hellip; Hãy cùng xem qua những thứ khiến cho Godot thực sự đáng để thử và lựa chọn cho việc phát triển game.\nGodot hoàn toàn open source và hướng tới cộng đồng Nếu như đem ra so sánh về tính mở, Godot là lựa chọn số 1. Godot hoàn toàn open source theo đúng nghĩa: hoàn toàn miễn phí, mã nguồn mở và tự do phát triển theo ý của bạn. Godot sử dụng giấy phép MIT, người dùng hoàn toàn có thể lấy mã nguồn về chỉnh sửa theo ý mình, phân phối lại mà không hề vi phạm điều gì. Hơn nữa Godot phát triển theo hướng cộng đồng, các tính năng, yêu cầu đều xuất phát từ cộng đồng và được tạo bởi sự đóng góp của cộng đồng. Điều này khiến cho các bạn hoàn toàn yên tâm về vấn đề bản quyền, chi phí (miễn phí hoàn toàn và mãi mãi). Không hề sợ vấn đề ảnh hưởng do mã nguồn đóng, tính thêm các phí trong quá trình phát triển hay phân phối game của mình như các game engine khác.\nGodot là engine game cross-platform cả về hệ điều hành cho phát triển và các nền tảng phân phối game. Bạn có thể phát triển godot trên hầu hết các nền tảng hệ điều hành: Window, MacOS, Linux. Game phát triển với godot hỗ trợ việc xuất bản ra rất nhiều các nền tảng khác nhau:\n Mobile: Android, IOS Desktop: Windows, macOS, Linux, UWP, *BSD, Haiku Web: sử dụng HTML5 và WebAssembly.  Godot sử dụng ngôn ngữ đa dạng và linh hoạt Bạn có rất nhiều sự lựa chọn cho ngôn ngữ lập trình với Godot:\n GDScript: ngôn ngữ scirpt tương tự như Python, được thiết kế riêng cho Godot và dành cho công việc phát triển game. Đây là một điều tuyệt với với Godot, mình sẽ có một bài viết riêng về vấn đề ngôn ngữ script trong lập trình game và vì sao Godot lại lựa chọn GDScript, vì sao GDscript lại tuyệt vời! (Ban đầu mình tiếp cận với Godot mình đã nghĩ: f*ck, lại có thêm một ngôn ngữ nữa phải tìm hiểu, nhưng đúng như những gì Godot đưa ra, hãy thử trải nghiệm với nó, không mất quá nhiều thời gian của bạn, nhưng bạn sẽ thấy vì sao nó lại cần phải có một ngôn ngữ thêm mới nữa!) C#: Ngôn ngữ được bổ sung vào sau và là ngôn ngữ được cộng đồng yêu cầu, đáp ứng hoàn toàn theo mong muốn từ phía cộng đồng (Theo mình đánh giá thì chắc là cộng đồng Unity chuyển qua mong muốn). Visual scripting: Giúp mọi người không cần phải code mà vẫn làm được game :)) GDNative: Support cho việc hỗ trợ binding cho bất kì một ngôn ngữ nào mà bạn mong muốn: các ngôn ngữ được cộng đồng hỗ trợ sử dụng GDNative: Python, Nim, D\u0026hellip; và C++ (Ngôn ngữ phát triển engine và cũng được engine hỗ trợ). Việc support GDNative sẽ giúp lập trình viên có thể viết các module native để tăng hiệu năng cho các phần trong game và hỗ trợ lập trình viên sử dụng các ngôn ngữ khác nhau vẫn có thể sử dụng engine. Cùng với việc hỗ trợ nhiều ngôn ngữ lập trình, Godot cũng có sẵn Editor để viết mã nguồn riêng cho engine. Theo mình đáng giá Editor cũng khá ổn :D.  Godot dễ sử dụng: Tất cả những gì trong engine đều là Node. Với việc tạo sẵn hàng trăm các loại node trong engine để hỗ trợ bạn làm game (Đừng nghĩ nhiều node mà phức tạp, vẫn rất là đơn giản theo cách riêng của nó :D), ngoài ra bạn hoàn toàn có thể tùy chỉnh các thuộc tính, hành vi của node hay tạo ra các node của riêng mình làm cho engine trở nên linh hoạt hơn. Giao diện editor hoàn toàn là đồ họa (tương tự Unity, Unreal, game maker, cocos creator\u0026hellip;) và bạn có thể viết mã để tùy chỉnh editor hay thêm các plugin cho nó.\nGodot Nhẹ File cài đặt của godot chỉ khoảng vài chục MB (62MB với bản window 64bit cho bản mới nhất 3.2 mình đang sử dụng). Thực sự đáng kinh ngạc vì nó quá nhẹ nhàng so với hàng trăm MB nặng nề của Unity, Unreal hay cocos creator. *Mình chém đấy vì thực sự thì khi export ra các nền tảng khác nhau các bạn sẽ phải tải thêm vài trăm MB nữa (424MB) (unity thì hàng GB @@), và thực sự thì Godot bản win mình dùng không phải cài :)) chỉ có mỗi thực thi exe để chạy và mở ra thì quá nhanh và nhẹ nhàng so với việc khởi động Unity hay cocos creator mà mình đã dùng.\nGodot phát triển game 2D thuần thay vì hỗ trợ 2D như các engine khác. Phần lớn các engine game đều hỗ trợ phát triển game cho 2D và 3D, nhưng các engine hàng đầu như Unity, Unreal lại là 3D và fake 2D chứ không hoàn toàn là 2D như Godot (các bản về sau của Unity thì bắt đầu có phần 2D riêng). Điều này khiến cho các game 2D phát triển với Godot sẽ có hiệu năng tốt hơn (tương tự như cocos) Tuy nhiên phần 3D của godot và cocos hiện tại thực sự chưa tốt hoàn toàn (về hiệu năng cũng như các tính năng cho 3D, các bản về sau hứa hẹn sẽ có nhiều cải thiện đặc biệt với bản 4.0 với việc render engin sử dụng là vulkan).\nNgoài ra Godot còn hỗ trợ hàng loạt các tính năng, công cụ đi kèm trong engine editor như shader, particle system, tiled map editor, animator tool, version control\u0026hellip; các bạn có thể xem thêm tại đây. Điều này khiến cho engine trở nên đầy đủ và tiện lợi @@\nTrên đây là những tóm tắt của mình về Godot với những ưu điểm của engine này. Tuy nhiên, Godot vẫn còn nhiều hạn chế như hiệu năng render của 3D vẫn còn kém, Việc build ra các nền tảng VR/AR hay các hệ máy console bị giới hạn (một phần vì giấy phép mã nguồn mở của Godot), Godot là một game engine còn trẻ (open source 2014) hệ sinh thái (ecosystem) còn hạn chế, các thư viện hỗ trợ đi kèm theo còn khá ít, vấn đề liên quan đến nguồn lực và các công ty chưa thực sự chọn godot như một engine chính bên cạnh các engine lâu đời và có cộng đồng đông như Unity hay cocos khiến cho việc lựa chọn Godot như một engine để theo đuổi, sử dụng và phát triển hạn chế. Theo thời gian những hạn chế này cũng sẽ thay đổi, engine ngày càng phát triển lên và việc xây dựng cộng đồng Godot sẽ ngày càng lớn mạnh hơn. Việc bắt đầu với blog này cũng là mong muốn Godot sẽ được chú trọng hơn ở Việt Nam và sẽ ngày càng được đón nhận hơn từ cộng đồng phát triển game Việt.\nTrong khuôn khổ một bài viết ngắn gọn, mình không thể đưa ra chi tiết và đầy đủ được sự tuyệt vời của một engine như Godot, nếu các bạn có chung quan điểm, lựa chọn thì mình hi vọng các bạn hãy thử trải nghiệm đủ với Godot đủ lâu và sẽ thấy Godot thực sự tuyệt vời thế nào.\nPS: Mình bắt đầu làm game với J2ME cho feature phone, sau đấy việc phát triển của smartphone, mình bắt đầu sử dụng các engine như Andengine, Libgdx để phát triển. Tuy nhiên qua các dự án game lớn hơn, hiệu năng của Java không tốt khiến mình phải lựa chọn Cocos2dx và C++ để phát triển. Cùng với thời gian cocos chuyển dần sang cocos creator (dùng JS là ngôn ngữ và đóng mã nguồn của editor) mình cũng tìm kiếm các engine khác và thử như Unity. Việc Unity có editor dễ dàng sử dụng, dễ debug, cộng đồng lớn và lượng resource nhiều khiến cho phát triển game trở nên dễ dàng, nhưng Unity vẫn mất phí, lại sử dụng ngôn ngữ biên dịch như C# hay không open source khiến mình vẫn chưa dừng lại lựa chọn như engine để phát triển lâu dài. Tình cờ biết đến Godot và trải nghiệm thử mình thấy engine hiệu năng, dùng ngôn ngữ script và quan trọng hơn cả là open source, hướng tới cộng đồng. Tuy nhiên Godot lại ít được biết đến và sử dụng nên mình muốn làm blog về Godot và viết lại những gì mình tìm hiểu, vừa để học và phát triển game, vừa để có nơi trao đổi và chia sẻ với mọi người có cùng chung quan điểm, để cộng đồng Godot Việt Nam ngày càng phát triển.\n","permalink":"https://mrgru.github.io/blog/why-do-i-choose-godot/","tags":["Open source","Game","Engine","Game Engine","MIT"],"title":"1. Vì sao mình lại chọn Godot."}]